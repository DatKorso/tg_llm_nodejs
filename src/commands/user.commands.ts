import { Telegraf } from 'telegraf';
import { MyContext } from '../types';
import { UserService } from '../services/user.service';
import { KeyboardService } from '../services/keyboard.service';
import { logger } from '../utils/logger';
import { ModelType, getModelName } from '../config/models.config';
import { MessageService } from '../services/message.service';

export function setupUserCommands(bot: Telegraf<MyContext>) {
    const userService = new UserService();
    const messageService = new MessageService();

    // –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    async function handleNewSession(ctx: MyContext) {
        try {
            if (!ctx.from) return;
            
            // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await messageService.clearUserHistory(ctx.from.id);
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            ctx.session = {
                modelType: ctx.session?.modelType || 'gpt-4o-mini',
                messageHistory: []
            };
            
            await ctx.reply('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.');
            logger.info(`New session started for user ${ctx.from.id}`);
        } catch (error) {
            logger.error('Error creating new session:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.');
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /new
    bot.command('new', handleNewSession);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
    bot.action('new_dialog', handleNewSession);
    bot.hears('üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', handleNewSession);

    bot.command('model', async (ctx) => {
        try {
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:',
                KeyboardService.getModelSelectionKeyboard()
            );
        } catch (error) {
            logger.error('Error in model command:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    bot.action(/model:(.+)/, async (ctx) => {
        try {
            if (!ctx.from) return;

            const modelType = ctx.match[1] as ModelType;
            const user = await userService.getUserById(ctx.from.id);
            
            if (!user) {
                await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            user.preferredModel = modelType;
            await userService.updateUser(user);

            const modelName = getModelName(modelType);
            await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${modelName}`);
            await ctx.editMessageText(`–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${modelName}`);
        } catch (error) {
            logger.error('Error in model selection:', error);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏');
        }
    });

    bot.hears('üîß –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', async (ctx) => {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:',
            KeyboardService.getModelSelectionKeyboard()
        );
    });

    bot.hears('‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å', async (ctx) => {
        try {
            if (!ctx.from) return;

            const user = await userService.getUserById(ctx.from.id);
            if (!user) {
                await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const modelName = getModelName(user.preferredModel as ModelType);
            await ctx.reply(`–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${modelName}`);
        } catch (error) {
            logger.error('Error getting current model:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏.');
        }
    });

    bot.hears('‚ùì –ü–æ–º–æ—â—å', async (ctx) => {
        const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
/model - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
        `;
        await ctx.reply(helpText);
    });
}
