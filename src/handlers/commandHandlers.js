const db = require('../database/db');
const SessionService = require('../services/sessionService');
const Keyboards = require('../keyboards/keyboards');
const logger = require('../utils/logger');
const config = require('../config/config');

async function handleStart(ctx) {
    try {
        const userId = ctx.from.id;
        const username = ctx.from.username;

        await db.createUser(userId, username);
        ctx.session.sessionId = await SessionService.createNewSession(userId);

        await ctx.reply(
            '<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</i>',
            { 
                parse_mode: 'HTML',
                ...Keyboards.getMainKeyboard()
            }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error);
        await ctx.reply('<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.</b>', { parse_mode: 'HTML' });
    }
}

async function handleNew(ctx) {
    try {
        ctx.session.sessionId = await SessionService.createNewSession(ctx.from.id);
        await ctx.reply(
            '<b>‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è</b>\n<i>–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω.</i>',
            { 
                parse_mode: 'HTML',
                ...Keyboards.getMainKeyboard()
            }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.');
    }
}

async function handleCurrentModel(ctx) {
    try {
        const user = await db.db.get(
            'SELECT selected_model FROM users WHERE user_id = ?',
            [ctx.from.id]
        );
        
        await ctx.reply(
            `<b>ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b>\n<code>${user.selected_model || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}</code>`,
            { parse_mode: 'HTML' }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.');
    }
}

async function handleModelSelection(ctx) {
    try {
        await ctx.reply(
            '<b>üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>',
            { 
                parse_mode: 'HTML',
                ...Keyboards.getModelSelectionKeyboard()
            }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.');
    }
}

async function handleModelChange(ctx) {
    try {
        const messageText = ctx.message.text;
        const [provider, modelKey] = messageText.split(' - ');
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        const model = config.PROVIDERS[provider].MODELS[modelKey];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –ë–î
        await db.updateUserModel(ctx.from.id, model);
        
        await ctx.reply(
            `<b>‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n<code>${model}</code>`,
            { 
                parse_mode: 'HTML',
                ...Keyboards.getMainKeyboard()
            }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏.');
    }
}

async function handleBack(ctx) {
    await ctx.reply(
        '<b>üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
        { 
            parse_mode: 'HTML',
            ...Keyboards.getMainKeyboard()
        }
    );
}

// –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥...

module.exports = {
    handleStart,
    handleNew,
    handleCurrentModel,
    handleModelSelection,
    handleModelChange,
    handleBack
};
