const db = require('../database/db');
const logger = require('../utils/logger');

async function handleMessage(ctx) {
    try {
        const userId = ctx.from.id;
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /message', { userId });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = ctx.message.text.replace(/^\/message\s+/, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        const replyToMessage = ctx.message.reply_to_message;
        const photo = replyToMessage?.photo;
        
        if (!messageText && !photo) {
            return ctx.reply(
                '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n' +
                '1. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç: /message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
                '2. –¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π /message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
        const users = await db.db.all('SELECT user_id, username FROM users WHERE access = 1');
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', { count: users.length });
        
        if (users.length === 0) {
            return ctx.reply('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        }
        
        await ctx.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
        
        let successCount = 0;
        let failCount = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for (const user of users) {
            try {
                if (photo) {
                    const bestPhoto = photo[photo.length - 1];
                    await ctx.telegram.sendPhoto(user.user_id, bestPhoto.file_id, {
                        caption: messageText
                    });
                } else {
                    await ctx.telegram.sendMessage(user.user_id, messageText);
                }
                successCount++;
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                    userId: user.user_id,
                    error: error.message
                });
                failCount++;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        const statsMessage = `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}`;
        await ctx.reply(statsMessage);

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã message:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
}

async function handleUsers(ctx) {
    try {
        logger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /users');
        
        const users = await db.db.all(
            'SELECT user_id, username, access, is_admin FROM users ORDER BY created_at DESC'
        );
        
        if (users.length === 0) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const userList = users.map(user => {
            const username = user.username || `ID: ${user.user_id}`;
            return `${username} - ${user.access ? '‚úÖ' : '‚ùå'}${user.is_admin ? ' (–∞–¥–º–∏–Ω)' : ''}`;
        }).join('\n');

        await ctx.reply(
            '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n' +
            '(‚úÖ - –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, ‚ùå - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)\n\n' +
            userList
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã users:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
}

async function handleGrant(ctx) {
    try {
        const username = ctx.message.text.split(' ')[1];
        if (!username) {
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant username');
        }

        const user = await db.getUserByUsername(username);
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        if (user.access === 1) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.`);
        }

        await db.updateUserAccess(user.user_id, 1);
        
        try {
            await ctx.telegram.sendMessage(
                user.user_id,
                '<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n' +
                '<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.</i>\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
                { parse_mode: 'HTML' }
            );
            ctx.reply(`‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
        } catch (notifyError) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyError);
            ctx.reply(
                `‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}\n` +
                `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`
            );
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã grant:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.');
    }
}

async function handleRevoke(ctx) {
    try {
        const username = ctx.message.text.split(' ')[1];
        if (!username) {
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /revoke username');
        }

        const user = await db.getUserByUsername(username);
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        if (user.access === 0) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.`);
        }

        await db.updateUserAccess(user.user_id, 0);
        ctx.reply(`‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã revoke:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞.');
    }
}

module.exports = {
    handleMessage,
    handleUsers,
    handleGrant,
    handleRevoke
};
