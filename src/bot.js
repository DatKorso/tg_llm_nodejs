const { Telegraf, session } = require('telegraf');
const config = require('./config/config');
const commandHandlers = require('./handlers/commandHandlers');
const adminHandlers = require('./handlers/adminHandlers');
const middleware = require('./middleware');
const logger = require('./utils/logger');
const AIService = require('./services/aiService');
const SessionService = require('./services/sessionService');
const db = require('./database/db'); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const bot = new Telegraf(config.BOT_TOKEN);

// Middleware (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
bot.use(session());
bot.use(middleware.loggingMiddleware);
bot.use(middleware.sessionMiddleware);

// –ö–æ–º–∞–Ω–¥–∞ start (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
bot.command('start', commandHandlers.handleStart);

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('message', middleware.adminMiddleware, adminHandlers.handleMessage);
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å –∫–æ–º–∞–Ω–¥–æ–π message
bot.on('photo', async (ctx) => {
    const caption = ctx.message?.caption;
    if (caption?.startsWith('/message')) {
        return adminHandlers.handleMessage(ctx);
    }
});

bot.command('grant', middleware.adminMiddleware, adminHandlers.handleGrant);
bot.command('users', middleware.adminMiddleware, adminHandlers.handleUsers);
bot.command('revoke', middleware.adminMiddleware, adminHandlers.handleRevoke);

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ—Å–ª–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
bot.use(middleware.accessMiddleware);

// –û–±—ã—á–Ω—ã–µ –∫–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–æ—Å—Ç—É–ø–æ–º)
bot.command('new', commandHandlers.handleNew);
bot.hears('üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', commandHandlers.handleNew);
bot.hears('‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å', commandHandlers.handleCurrentModel);
bot.hears('üîß –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', commandHandlers.handleModelSelection);
bot.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', commandHandlers.handleBack);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
bot.hears(/^(GPTUNNEL|MISTRAL) - .+$/, commandHandlers.handleModelChange);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (ctx.message.text.startsWith('/')) return;

    try {
        logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
            text: ctx.message.text,
            from: ctx.from.id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
        if (!ctx.session.sessionId) {
            logger.info('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...');
            ctx.session.sessionId = await SessionService.createNewSession(ctx.from.id);
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await db.getUserModel(ctx.from.id); // –ò–∑–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        logger.info('–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:', user?.selected_model);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const tempMessage = await ctx.reply(
            '<i>ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</i>',
            { parse_mode: 'HTML' }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await SessionService.addMessage(
            ctx.from.id,
            ctx.session.sessionId,
            'user',
            ctx.message.text
        );

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = await SessionService.getSessionMessages(
            ctx.from.id,
            ctx.session.sessionId
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        const response = await AIService.sendMessage(
            user?.selected_model || config.DEFAULT_MODEL,
            messages
        );

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const formattedResponse = response.content
            .replace(/`{3}([\s\S]*?)`{3}/g, '<pre>$1</pre>')
            .replace(/`([^`]+)`/g, '<code>$1</code>')
            .replace(/\*\*([^*]+)\*\*/g, '<b>$1</b>')
            .replace(/\*([^*]+)\*/g, '<i>$1</i>');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        await SessionService.addMessage(
            ctx.from.id,
            ctx.session.sessionId,
            'assistant',
            response.content
        );

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.editMessageText(
            ctx.chat.id,
            tempMessage.message_id,
            null,
            formattedResponse,
            { 
                parse_mode: 'HTML',
                disable_web_page_preview: true
            }
        );
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply(
            '<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>\n' +
            '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.</i>',
            { parse_mode: 'HTML' }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    logger.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', {
        error: err.message,
        stack: err.stack,
        update: ctx.update,
        user: ctx.from
    });
    
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = bot;
