const { Telegraf, session } = require('telegraf');
const config = require('./config/config');
const db = require('./database/db');
const AIService = require('./services/aiService');
const SessionService = require('./services/sessionService');
const Keyboards = require('./keyboards/keyboards');
const { runMigrations } = require('./database/migrations');

const bot = new Telegraf(config.BOT_TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ)
bot.use((ctx, next) => {
    console.log('=== –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===');
    console.log('–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', ctx.updateType);
    console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        from: ctx.from,
        message: ctx.message,
        updateType: ctx.updateType
    });
    return next();
});

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–∏
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.sessionId) {
        ctx.session.sessionId = null;
    }
    return next();
});

// –ù–∞—Ö–æ–¥–∏–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É message –ø–µ—Ä–µ–¥ middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ adminMiddleware, –Ω–æ –¥–æ –æ–±—â–µ–≥–æ middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
const adminMiddleware = async (ctx, next) => {
    console.log('adminMiddleware: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('adminMiddleware: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    
    const isAdmin = await db.isAdmin(ctx.from.id);
    console.log('adminMiddleware: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isAdmin);
    
    if (!isAdmin) {
        console.log('adminMiddleware: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
    console.log('adminMiddleware: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
    return next();
};

// –ö–æ–º–∞–Ω–¥–∞ message (–æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
bot.command('message', adminMiddleware, async (ctx) => {
    try {
        const userId = ctx.from.id;
        console.log('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /message ===');
        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const isAdmin = await db.isAdmin(userId);
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', isAdmin);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = ctx.message.text.replace(/^\/message\s+/, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        const replyToMessage = ctx.message.reply_to_message;
        const photo = replyToMessage?.photo;
        
        if (!messageText && !photo) {
            return ctx.reply(
                '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n' +
                '1. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç: /message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
                '2. –¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π /message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
        const users = await db.db.all('SELECT user_id, username FROM users WHERE access = 1');
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', users);
        
        if (users.length === 0) {
            return ctx.reply('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        }
        
        await ctx.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
        
        let successCount = 0;
        let failCount = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for (const user of users) {
            try {
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username || user.user_id}`);
                
                if (photo) {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ)
                    const bestPhoto = photo[photo.length - 1];
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    await ctx.telegram.sendPhoto(user.user_id, bestPhoto.file_id, {
                        caption: messageText
                    });
                } else {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await ctx.telegram.sendMessage(user.user_id, messageText);
                }
                
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username || user.user_id}`);
                successCount++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username || user.user_id}:`, error);
                failCount++;
            }
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const statsMessage = `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}`;
        console.log(statsMessage);
        await ctx.reply(statsMessage);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /message:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã message)
bot.use(async (ctx, next) => {
    console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ===');
    console.log('–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', ctx.updateType);
    console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message?.text);
    
    if (ctx.message?.text === '/start') {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start');
        return next();
    }
    
    const userId = ctx.from.id;
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const access = await db.getUserAccess(userId);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', access);
    
    if (!access) {
        console.log('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    
    console.log('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ users –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–π
bot.command('users', adminMiddleware, async (ctx) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /users');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—â–µ —Ä–∞–∑ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const isAdmin = await db.isAdmin(ctx.from.id);
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', isAdmin);
        
        const users = await db.db.all(
            'SELECT user_id, username, access, is_admin FROM users ORDER BY created_at DESC'
        );
        console.log('–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
        
        if (users.length === 0) {
            console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç');
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const userList = users.map(user => {
            
            const username = user.username || `ID: ${user.user_id}`;
            const status = `${username} - ${user.access ? '‚úÖ' : '‚ùå'}${user.is_admin ? ' (–∞–¥–º–∏–Ω)' : ''}`;
            console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', status);
            return status;
        }).join('\n');

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        await ctx.reply(
            '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n' +
            '(‚úÖ - –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, ‚ùå - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)\n\n' +
            userList
        );
        console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã users:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ grant –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
bot.command('grant', adminMiddleware, async (ctx) => {
    try {
        const username = ctx.message.text.split(' ')[1];
        if (!username) {
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant username');
        }

        const user = await db.getUserByUsername(username);
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        if (user.access === 1) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.`);
        }

        await db.updateUserAccess(user.user_id, 1);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞
        try {
            await ctx.telegram.sendMessage(
                user.user_id,
                '<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n' +
                '<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.</i>\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
                { parse_mode: 'HTML' }
            );
            ctx.reply(`‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
        } catch (notifyError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyError);
            ctx.reply(
                `‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}\n` +
                `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã grant:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ revoke –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞
bot.command('revoke', adminMiddleware, async (ctx) => {
    try {
        const username = ctx.message.text.split(' ')[1];
        if (!username) {
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /revoke username');
        }

        const user = await db.getUserByUsername(username);
        if (!user) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        if (user.access === 0) {
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.`);
        }

        await db.updateUserAccess(user.user_id, 0);
        ctx.reply(`–î–æ—Å—Ç–ø –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã revoke:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ start (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞)
bot.command('start', async (ctx) => {
    try {
        const userId = ctx.from.id;
        const username = ctx.from.username;

        console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${username})`);

        await db.createUser(userId, username);
        ctx.session.sessionId = await SessionService.createNewSession(userId);

        await ctx.reply(
            '<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</i>',
            { 
                parse_mode: 'HTML',
                ...Keyboards.getMainKeyboard()
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error);
        await ctx.reply(
            '<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.</b>\n<i>–ü–æ–ø—Ä–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>',
            { parse_mode: 'HTML' }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã new
const newSessionMessage = async (ctx) => {
    ctx.session.sessionId = await SessionService.createNewSession(ctx.from.id);
    await ctx.reply(
        '<b>‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è</b>\n<i>–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω.</i>',
        { 
            parse_mode: 'HTML',
            ...Keyboards.getMainKeyboard()
        }
    );
};

bot.command('new', newSessionMessage);
bot.hears('üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', newSessionMessage);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"
bot.hears('üîß –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', async (ctx) => {
    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
        Keyboards.getModelSelectionKeyboard()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
bot.hears(/^(OPENAI|GPTUNNEL|MISTRAL) - .+$/, async (ctx) => {
    const [provider, modelKey] = ctx.message.text.split(' - ');
    const model = config.PROVIDERS[provider].MODELS[modelKey.replace(provider + ' - ', '')];
    
    await db.updateUserModel(ctx.from.id, model);
    await ctx.reply(
        `–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${model}`,
        Keyboards.getMainKeyboard()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å"
bot.hears('‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å', async (ctx) => {
    const user = await db.db.get(
        'SELECT selected_model FROM users WHERE user_id = ?',
        [ctx.from.id]
    );
    await ctx.reply(`–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${user.selected_model}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Keyboards.getMainKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    if (ctx.message.text.startsWith('/')) return;

    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);

        if (!ctx.session.sessionId) {
            console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...');
            ctx.session.sessionId = await SessionService.createNewSession(ctx.from.id);
        }

        const userId = ctx.from.id;
        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

        const user = await db.db.get(
            'SELECT selected_model FROM users WHERE user_id = ?',
            [userId]
        );
        console.log('–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:', user?.selected_model);

        // –û—Ç–ø—Ä–∞–≤–ª—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const tempMessage = await ctx.reply(
            '<i>ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</i>',
            { parse_mode: 'HTML' }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await SessionService.addMessage(
            userId,
            ctx.session.sessionId,
            'user',
            ctx.message.text
        );

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...');
        const messages = await SessionService.getSessionMessages(
            userId,
            ctx.session.sessionId
        );
        console.log('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', messages);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI...');
        const response = await AIService.sendMessage(
            user.selected_model,
            messages
        );
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', response);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ HTML
        const formattedResponse = response.content
            .replace(/`{3}([\s\S]*?)`{3}/g, '<pre>$1</pre>') // –∫–æ–¥ –≤ –±–ª–æ–∫–∞—Ö
            .replace(/`([^`]+)`/g, '<code>$1</code>') // –∏–Ω–ª–∞–π–Ω –∫–æ–¥
            .replace(/\*\*([^*]+)\*\*/g, '<b>$1</b>') // –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            .replace(/\*([^*]+)\*/g, '<i>$1</i>'); // –∫—É—Ä—Å–∏–≤
            // –£–±—Ä–∞–ª–∏ –∑–∞–º–µ–Ω—É \n –Ω–∞ <br>

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI...');
        await SessionService.addMessage(
            userId,
            ctx.session.sessionId,
            'assistant',
            response.content
        );

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await ctx.telegram.editMessageText(
            ctx.chat.id,
            tempMessage.message_id,
            null,
            formattedResponse,
            { 
                parse_mode: 'HTML',
                disable_web_page_preview: true // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
            }
        );
        
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply(
            '<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂.</i>',
            { parse_mode: 'HTML' }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await db.connect();
        await runMigrations();
        
        // –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const users = await db.db.all('SELECT * FROM users');
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã users:', users);
        
        // –Ø–≤–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        await bot.telegram.setMyCommands([
            { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
            { command: 'new', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é' },
            { command: 'message', description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' },
            { command: 'users', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' },
            { command: 'grant', description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' },
            { command: 'revoke', description: '–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–≤)' }
        ]);
        
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

startBot();

// –í–∫–ª—é—á–∞–µ–º graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot.use((ctx, next) => {
    if (ctx.message?.text?.startsWith('/')) {
        console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:', ctx.message.text);
        console.log('–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from);
    }
    return next();
});

// –î–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware
bot.use((ctx, next) => {
    console.log('Middleware triggered:', ctx.message?.text);
    return next();
});

